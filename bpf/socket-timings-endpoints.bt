#!/usr/local/bin/bpftrace
/*
 * !!! NOT YET WORKING CORRECTLY !!!
 *
 * Monitors round-trip times of request for processes with arg1 <= PID <= arg2
 * and prints a histogram of round-trip times in µs.
 * Histogram shows 100 µs buckets from 0 to 5k µs.
 * This works for interlocked request/responses, so for stuff like MariaDB connections.
 * It's socket-timings.bt, but extended by soconnect.bt; so that it is indexed by IP and Port properly.
 */

#include <linux/in.h>
#include <linux/in6.h>

BEGIN {
    printf("Monitoring round-trip times of request for processes with %d (arg1) <= PID <= %d (arg2)\n", $1, $2);
}

//
// 1) FILL @fdIpLookup and @fdPortLookup for later, only if $3 (IP) and $4 (Port) match
//
tracepoint:syscalls:sys_enter_connect
/(args->uservaddr->sa_family == AF_INET ||
    args->uservaddr->sa_family == AF_INET6)
    && pid >= $1 && pid <= $2
/
{
    @sockaddr[tid] = args->uservaddr;
    @fd[tid] = args->fd;
}

tracepoint:syscalls:sys_exit_connect
/@fd[tid]/
{
    $fdId = @fd[tid];
    
    if (@sockaddr[tid]->sa_family == AF_INET) {
        $s = (struct sockaddr_in *)@sockaddr[tid];
        $port = ($s->sin_port >> 8) | (($s->sin_port << 8) & 0xff00);
        
        @fdIpLookup[pid, $fdId] = ntop(AF_INET, $s->sin_addr.s_addr);
        @fdPortLookup[pid, $fdId] = $port;
    } else {
        $s6 = (struct sockaddr_in6 *)@sockaddr[tid];
        $port = ($s6->sin6_port >> 8) | (($s6->sin6_port << 8) & 0xff00);

        @fdIpLookup[pid, $fdId] = ntop(AF_INET6, $s6->sin6_addr.in6_u.u6_addr8);
        @fdPortLookup[pid, $fdId] = $port;
    }

    delete(@sockaddr[tid]);
    delete(@fd[tid]);
}


//
// 2) do the actual measurement
//
tracepoint:syscalls:sys_enter_sendto
/pid >= $1 && pid <= $2/
{
    if (@end[pid, tid, args->fd] == 0) {
        // first connection
        if (@start[pid, tid, args->fd] == 0) {
            @start[pid, tid, args->fd] = nsecs;
        }
    } else {
        // old connection finished, starting a new one
        $duration_us = (@end[pid, tid, args->fd] - @start[pid, tid, args->fd]) / 1000; // in µs

        $ip = @fdIpLookup[pid, args->fd];
        $port = @fdPortLookup[pid, args->fd];
        @control[pid, args->fd] = lhist($duration_us, 0, 5000, 100);
        @us[pid, $ip, $port] = lhist($duration_us, 0, 5000, 100);

        // new start
        @start[pid, tid, args->fd] = nsecs;
        delete(@end[pid, tid, args->fd]);
    }
}

tracepoint:syscalls:sys_enter_recvfrom
/@start[pid, tid, args->fd]/
{
    @recvfromFd[pid, tid] = args->fd;
}

tracepoint:syscalls:sys_exit_recvfrom
// do not check for @recvfromFd[pid, tid] since the fd can be 0 when tracing ping (is this a bug?)
/pid >= $1 && pid <= $2/
{
    $fd = @recvfromFd[pid, tid];
    @end[pid, tid, $fd] = nsecs;
    delete(@recvfromFd[pid, tid]);
}

END {
    // delete intermediate results (otherwise they are printed)
    clear(@start);
    clear(@end);
    clear(@fdIpLookup);
    clear(@fdPortLookup);
    clear(@sockaddr);
    clear(@fd);
    printf("\n\nLatency Histogram from the start of the first request to the start of the first reply.\nIndexed by PID, FD in µs");
}
