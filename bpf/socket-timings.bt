#!/usr/local/bin/bpftrace

/*
 * Monitors round-trip times of request for processes with arg1 <= PID <= arg2
 * and prints a histogram of round-trip times in µs.
 * Histogram shows 100 µs buckets from 0 to 5k µs.
 *
 * Note that the last request is not included into the measurements!
 * This should be ok, since this script gives an overview over many requests.
 */

BEGIN {
    printf("Monitoring round-trip times of request for processes with %d (arg1) <= PID <= %d (arg2)\n", $1, $2);
}

tracepoint:syscalls:sys_enter_connect
/pid >= $1 && pid <= $2/
{
    if (@end[pid, tid, args->fd] == 0) {
        // first connection
        if (@start[pid, tid, args->fd] == 0) {
            @start[pid, tid, args->fd] = nsecs;
        }
    } else {
        // old connection finished, starting a new one
        $duration_us = (@end[pid, tid, args->fd] - @start[pid, tid, args->fd]) / 1000; // in ��s
        @us[pid, args->fd] = lhist($duration_us, 0, 5000, 100);

        // new start
        @start[pid, tid, args->fd] = nsecs;
        delete(@end[pid, tid, args->fd]);
    }
}

/*
 * Though the difference is usually very small, we want to measure the time between sys_enter_sendto and sys_exit_recvfrom,
 * and not sys_enter_recvfrom. We have to "save" the socket file-descriptor in systen_enter_recvfrom though.
 *
 * The below trace shows measurements of a ping process (during local development, written by printf statements within tracepoints):
 * [system µs - message]
 * 798475852 - >>> tracepoint:syscalls:sys_enter_sendto: args->fd=0
 * 798476067 - tracepoint:syscalls:sys_enter_recvfrom: args->fd=0
 * 798493993 - tracepoint:syscalls:sys_exit_recvfrom
 * 798494105 - tracepoint:syscalls:sys_enter_recvfrom: args->fd=0
 * 799476983 - tracepoint:syscalls:sys_exit_recvfrom
 * 799477099 - >>> tracepoint:syscalls:sys_enter_sendto: args->fd=0
 * 799477311 - tracepoint:syscalls:sys_enter_recvfrom: args->fd=0
 * 799525011 - tracepoint:syscalls:sys_exit_recvfrom
 * 799525160 - tracepoint:syscalls:sys_enter_recvfrom: args->fd=0
 * 800480223 - tracepoint:syscalls:sys_exit_recvfrom
 *
 * Currently I am not sure under which circumstances the time between enter and exit could increases into the ms range.
 */

tracepoint:syscalls:sys_enter_recvfrom
/@start[pid, tid, args->fd]/
{
    @recvfromFd[pid, tid] = args->fd;
}

tracepoint:syscalls:sys_exit_recvfrom
// do not check for @recvfromFd[pid, tid] since the fd can be 0 when tracing ping (is this a bug?)
/pid >= $1 && pid <= $2/
{
    $fd = @recvfromFd[pid, tid];
    @end[pid, tid, $fd] = nsecs;
    delete(@recvfromFd[pid, tid]);
}

END {
    // delete intermediate results (otherwise they are printed)
    clear(@start);
    clear(@end);
    clear(@recvfromFd);
    printf("\n\nLatency Histogram from the start of the first request to the start of the first reply.\nIndexed by PID, FD in µs");
}
